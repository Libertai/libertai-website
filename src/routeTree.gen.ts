/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TokenomicsImport } from './routes/tokenomics'
import { Route as RoadmapImport } from './routes/roadmap'
import { Route as PrivateAiImport } from './routes/private-ai'
import { Route as ApiImport } from './routes/api'
import { Route as IndexImport } from './routes/index'
import { Route as UseCaseUbisoftImport } from './routes/use-case/ubisoft'

// Create/Update Routes

const TokenomicsRoute = TokenomicsImport.update({
  id: '/tokenomics',
  path: '/tokenomics',
  getParentRoute: () => rootRoute,
} as any)

const RoadmapRoute = RoadmapImport.update({
  id: '/roadmap',
  path: '/roadmap',
  getParentRoute: () => rootRoute,
} as any)

const PrivateAiRoute = PrivateAiImport.update({
  id: '/private-ai',
  path: '/private-ai',
  getParentRoute: () => rootRoute,
} as any)

const ApiRoute = ApiImport.update({
  id: '/api',
  path: '/api',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UseCaseUbisoftRoute = UseCaseUbisoftImport.update({
  id: '/use-case/ubisoft',
  path: '/use-case/ubisoft',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/api': {
      id: '/api'
      path: '/api'
      fullPath: '/api'
      preLoaderRoute: typeof ApiImport
      parentRoute: typeof rootRoute
    }
    '/private-ai': {
      id: '/private-ai'
      path: '/private-ai'
      fullPath: '/private-ai'
      preLoaderRoute: typeof PrivateAiImport
      parentRoute: typeof rootRoute
    }
    '/roadmap': {
      id: '/roadmap'
      path: '/roadmap'
      fullPath: '/roadmap'
      preLoaderRoute: typeof RoadmapImport
      parentRoute: typeof rootRoute
    }
    '/tokenomics': {
      id: '/tokenomics'
      path: '/tokenomics'
      fullPath: '/tokenomics'
      preLoaderRoute: typeof TokenomicsImport
      parentRoute: typeof rootRoute
    }
    '/use-case/ubisoft': {
      id: '/use-case/ubisoft'
      path: '/use-case/ubisoft'
      fullPath: '/use-case/ubisoft'
      preLoaderRoute: typeof UseCaseUbisoftImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/api': typeof ApiRoute
  '/private-ai': typeof PrivateAiRoute
  '/roadmap': typeof RoadmapRoute
  '/tokenomics': typeof TokenomicsRoute
  '/use-case/ubisoft': typeof UseCaseUbisoftRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/api': typeof ApiRoute
  '/private-ai': typeof PrivateAiRoute
  '/roadmap': typeof RoadmapRoute
  '/tokenomics': typeof TokenomicsRoute
  '/use-case/ubisoft': typeof UseCaseUbisoftRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/api': typeof ApiRoute
  '/private-ai': typeof PrivateAiRoute
  '/roadmap': typeof RoadmapRoute
  '/tokenomics': typeof TokenomicsRoute
  '/use-case/ubisoft': typeof UseCaseUbisoftRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/api'
    | '/private-ai'
    | '/roadmap'
    | '/tokenomics'
    | '/use-case/ubisoft'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/api'
    | '/private-ai'
    | '/roadmap'
    | '/tokenomics'
    | '/use-case/ubisoft'
  id:
    | '__root__'
    | '/'
    | '/api'
    | '/private-ai'
    | '/roadmap'
    | '/tokenomics'
    | '/use-case/ubisoft'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ApiRoute: typeof ApiRoute
  PrivateAiRoute: typeof PrivateAiRoute
  RoadmapRoute: typeof RoadmapRoute
  TokenomicsRoute: typeof TokenomicsRoute
  UseCaseUbisoftRoute: typeof UseCaseUbisoftRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ApiRoute: ApiRoute,
  PrivateAiRoute: PrivateAiRoute,
  RoadmapRoute: RoadmapRoute,
  TokenomicsRoute: TokenomicsRoute,
  UseCaseUbisoftRoute: UseCaseUbisoftRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/api",
        "/private-ai",
        "/roadmap",
        "/tokenomics",
        "/use-case/ubisoft"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/api": {
      "filePath": "api.tsx"
    },
    "/private-ai": {
      "filePath": "private-ai.tsx"
    },
    "/roadmap": {
      "filePath": "roadmap.tsx"
    },
    "/tokenomics": {
      "filePath": "tokenomics.tsx"
    },
    "/use-case/ubisoft": {
      "filePath": "use-case/ubisoft.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
